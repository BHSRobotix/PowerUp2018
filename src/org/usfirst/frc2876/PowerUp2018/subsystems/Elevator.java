// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.PowerUp2018.subsystems;

import org.usfirst.frc2876.PowerUp2018.RobotMap;
import org.usfirst.frc2876.PowerUp2018.commands.ElevatorStop;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS



/**
 *
 */
public class Elevator extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OI

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OI

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final WPI_TalonSRX elevatorTalonSRX5 = RobotMap.elevatorElevatorTalonSRX5;
	private final WPI_TalonSRX elevatorTalonSRX6 = RobotMap.elevatorElevatorTalonSRX6;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	private final WPI_TalonSRX elevatorMaster = RobotMap.elevatorMaster;

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		setDefaultCommand(new ElevatorStop());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
	private static final double PULSES_PER_REV = 4096;

	public static final int kTimeoutMs = 0;
	public static final int kPIDLoopIdx = 0;
	public static boolean kSensorPhase = true;
	public static boolean kMotorInvert = false;

	public void setupPID(){

		/* choose the sensor and sensor direction */
		elevatorMaster.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, kPIDLoopIdx,
				kTimeoutMs);

		/* choose to ensure sensor is positive when output is positive */
		elevatorMaster.setSensorPhase(kSensorPhase);

		/* choose based on what direction you want forward/positive to be.
		 * This does not affect sensor phase. */ 
		elevatorMaster.setInverted(kMotorInvert);

		/* set the peak and nominal outputs, 12V means full */
		elevatorMaster.configNominalOutputForward(0, kTimeoutMs);
		elevatorMaster.configNominalOutputReverse(0, kTimeoutMs);
		elevatorMaster.configPeakOutputForward(1, kTimeoutMs);
		elevatorMaster.configPeakOutputReverse(-1, kTimeoutMs);
		/*
		 * set the allowable closed-loop error, Closed-Loop output will be
		 * neutral within this range. See Table in Section 17.2.1 for native
		 * units per rotation.
		 */
		elevatorMaster.configAllowableClosedloopError(kPIDLoopIdx, 10, kTimeoutMs);

		/* set closed loop gains in slot0, typically kF stays zero. */
		elevatorMaster.config_kF(kPIDLoopIdx, 0.0, kTimeoutMs);
		elevatorMaster.config_kP(kPIDLoopIdx, 0.1, kTimeoutMs);
		elevatorMaster.config_kI(kPIDLoopIdx, 0.0, kTimeoutMs);
		elevatorMaster.config_kD(kPIDLoopIdx, 0.0, kTimeoutMs);

		/*
		 * lets grab the 360 degree position of the MagEncoder's absolute
		 * position, and initially set the relative sensor to match.
		 */
//		int absolutePosition = elevatorMaster.getSensorCollection().getPulseWidthPosition();
//		/* mask out overflows, keep bottom 12 bits */
//		absolutePosition &= 0xFFF;
//		if (kSensorPhase)
//			absolutePosition *= -1;
//		if (kMotorInvert)
//			absolutePosition *= -1;
//		/* set the quadrature (relative) sensor to match absolute */
//		elevatorMaster.setSelectedSensorPosition(absolutePosition, kPIDLoopIdx, kTimeoutMs);
	}
	
	public double nativeToInches(double nativeUnits){
		return (nativeUnits / PULSES_PER_REV);
	}
//	TODO: Add a diameter value for the spool; somewhat to the effect of the wheel diameter for the drivetrain
//	Spool value = 1.12 inches
	public double inchesToNative(double inches){
		return (inches * PULSES_PER_REV);
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop

	}
	
	public void updateSmartDashboard(){
		SmartDashboard.putNumber("Elevator getPosition", getPosition());
		
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void setPosition(double positionInches){
		double positionNative = inchesToNative(positionInches);
		elevatorMaster.set(ControlMode.Position, positionNative);
	}
	
	public double getPosition(){
		return elevatorMaster.getSelectedSensorPosition(0);
	}
	
	public void Up() {
		elevatorMaster.set(.3);

	}

	public void Stop() {
		elevatorMaster.set(0);

	}

	public void Down() {
		elevatorMaster.set(-.3);

	}

}